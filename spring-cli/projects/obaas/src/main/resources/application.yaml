# 
#  This is an example Spring application.yaml configuration file for a
#  Spring Boot application that can be deployed to Oracle Backend for
#  Spring Boot and Microservices.
#

spring:
  application:
    name: restservice
  threads:
    virtual:
      enabled: true
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.OracleDialect
        format_sql: true
    show-sql: true


  # This section configures Liquibase to automate the schema and reference
  # data based on the definitions under src/main/resources/db/changelog.
  # Comment out this section if you do not need Liquibase.
  # Note that the variables used here will be injected into the deployment
  # automatically when you deploy with oractl or the IDE plugins.
  liquibase:
    change-log: classpath:db/changelog/controller.yaml
    url: ${spring.datasource.url}
    user: ${liquibase.datasource.username}
    password: ${liquibase.datasource.password}
    enabled: ${LIQUIBASE_ENABLED:true}
    
  # This section configures an Oracle datasource using UCP.  You can adjust
  # the pool sizing parameters below in the oracleucp section.
  # Note that the variables used here will be injected into the deployment
  # automatically when you deploy with oractl or the IDE plugins.
  datasource:
    url: ${spring.datasource.url}
    username: ${spring.datasource.username}
    password: ${spring.datasource.password}
    driver-class-name: oracle.jdbc.OracleDriver
    type: oracle.ucp.jdbc.PoolDataSource
    oracleucp:
      connection-factory-class-name: oracle.jdbc.pool.OracleDataSource
      connection-pool-name: CustomerConnectionPool
      initial-pool-size: 15
      min-pool-size: 10
      max-pool-size: 30
      shared: true

# This section configures service discovery using the Spring Cloud Eureka Service
# Registry that is automatically installed and configured in Oracle Backend for
# Spring Boot and Microservices.  Note that it must be configured to use IP address
# not hostname since the deployment is in Kubernetes and the hostname allocated to
# pod will not match.
eureka:
  instance:
    hostname: ${spring.application.name}
    preferIpAddress: true
  client:
    service-url:
      defaultZone: ${eureka.service-url}
    fetch-registry: true
    register-with-eureka: true
    enabled: true

# This section confiugres 
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    tags:
      application: ${spring.application.name}
  tracing:
    sampling:
      probability: 1.0
  info:
    os:
      enabled: true
    env:
      enabled: true
    java:
      enabled: true
  otlp:
    tracing:
      endpoint: ${otel.exporter.otlp.endpoint}

logging:
  level:
    root: INFO
    com.example: INFO